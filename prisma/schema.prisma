generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  kindeId   String   @unique
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  dob       DateTime
  gender    Gender
  image     String?

  addressId String
  address   Address @relation(fields: [addressId], references: [id])

  properties Property[]
  listings   Listing[]
  bookings   Booking[]
  reviews    Review[]
  favourites Favourite[]
}

enum Gender {
  MALE
  FEMALE
  OTHERS
}

model Address {
  id      String @id
  city    String
  state   String
  country String
  user    User[]
}

model Amenity {
  id         String      @id @default(cuid())
  name       AmenityType
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])
}

model Booking {
  id              String           @id @default(cuid())
  startDate       DateTime
  endDate         DateTime
  totalPrice      Float
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  userId          String
  propertyId      String
  roomId          String?
  status          BookingStatus
  property        Property @relation(fields: [propertyId], references: [id])
  room            Room?    @relation(fields: [roomId], references: [id])
  user            User     @relation(fields: [userId], references: [id])
  payment         Payment?
  checkInOut      CheckInCheckOut?
}

model CheckInCheckOut {
  id           String   @id
  checkInDate  DateTime
  checkOutDate DateTime
  bookingId    String   @unique
  booking      Booking  @relation(fields: [bookingId], references: [id])
}



model Image {
  id         String @id @default(cuid())
  link       String
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])
}

model Listing {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  propertyId String
  user       User     @relation(fields: [userId], references: [id])
  property   Property @relation(fields: [propertyId], references: [id])
}

model Location {
  id        String     @id @default(cuid())
  city      String
  state     String
  country   String
  latitude  Float?
  longitude Float?
  property  Property[]
}

model Payment {
  id          String   @id @default(cuid())
  amount      Float
  paymentDate DateTime
  bookingId   String   @unique
  booking     Booking  @relation(fields: [bookingId], references: [id])
}

model Property {
  id            String                @id @default(cuid())
  name          String
  description   String
  pricePerNight Float
  maxGuests     Int
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  propertyType  PropertyType
  isHotel       Boolean               @default(false)
  isDeleted     Boolean               @default(false)
  locationId    String
  userId        String
  amenities       Amenity[]
  booking       Booking[]
  favourite     Favourite[]
  image         Image[]
  listings       Listing[]
  location      Location @relation(fields: [locationId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
  reviews        Review[]
  rooms          Room[]
}

model Review {
  id         String   @id @default(cuid())
  rating     Int
  comment    String
  createdAt  DateTime @default(now())
  userId     String
  propertyId String
  user       User     @relation(fields: [userId], references: [id])
  property   Property @relation(fields: [propertyId], references: [id])
}

model Room {
  id            String    @id @default(cuid())
  name          String
  description   String
  capacity      Int
  pricePerNight Float
  propertyId    String
  booking       Booking[]
  property      Property @relation(fields: [propertyId], references: [id])
}



enum PropertyType {
  Hotel
  Home
  Resort
  Farmhouse
  Beachhouse
  Cottage
  Apartment
}

enum BookingStatus {
  CONFIRMED
  ACTIVE
  COMPLETED
}



model Favourite {
  id         String @id @default(cuid())
  userId     String
  propertyId String

  user     User     @relation(fields: [userId], references: [id])
  property Property @relation(fields: [propertyId], references: [id])

  @@unique([userId, propertyId])
}





enum AmenityType {
  WIFI
  PARKING
  AIR_CONDITIONING
  COFFEE
  PARK
  POOL
  GYM
  KITCHEN
  TV
  LAUNDRY
  PET_FRIENDLY
}

enum UserGender {
  MALE
  FEMALE
  OTHERS
}
