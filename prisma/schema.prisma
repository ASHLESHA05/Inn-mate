// This is your Prisma schema file
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  kindeId   String   @unique
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  dob       DateTime
  gender    Gender
  image     String?

  addressId String
  address   Address @relation(fields: [addressId], references: [id])

  properties Property[]
  listings   Listing[]
  bookings   Booking[]
  reviews    Review[]
  favourites Favourite[]
}

enum Gender {
  MALE
  FEMALE
  OTHERS
}

model Address {
  id      String @id @default(cuid())
  city    String
  state   String
  country String

  users User[]
}

model Property {
  id            String       @id @default(cuid())
  name          String
  description   String
  pricePerNight Float
  maxGuests     Int
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  propertyType  PropertyType
  isHotel       Boolean      @default(false)
  isDeleted     Boolean      @default(false)
  RoomType      String       @default("")

  locationId String
  location   Location @relation(fields: [locationId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  images     Image[]
  rooms      Room[]
  listings   Listing[]
  bookings   Booking[]
  reviews    Review[]
  favourites Favourite[]
  amenities  Amenity[]
  Current_Space Int?  
}

model Room {
  id            String @id @default(cuid())
  name          String
  description   String
  capacity      Int
  pricePerNight Float

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  bookings Booking[]
}

model Image {
  id   String @id @default(cuid())
  link String

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

enum PropertyType {
  Hotel
  Home
  Resort
  Farmhouse
  Beachhouse
  Cottage
  Apartment
}

model Booking {
  id         String   @id @default(cuid())
  totalPrice Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  roomId String?
  room   Room?   @relation(fields: [roomId], references: [id])

  status BookingStatus

  payment    Payment?
  checkInOut CheckInCheckOut?
}

enum BookingStatus {
  CONFIRMED
  ACTIVE
  COMPLETED
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model Favourite {
  id         String @id @default(cuid())
  userId     String
  propertyId String

  user     User     @relation(fields: [userId], references: [id])
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([userId, propertyId])
}

model Listing {
  id                String   @id @default(cuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  availabilityStart DateTime
  availabilityEnd   DateTime

  userId String
  user   User   @relation(fields: [userId], references: [id])

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([userId, propertyId])
}

model Amenity {
  id   String      @id @default(cuid())
  name AmenityType

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

enum AmenityType {
  WIFI
  PARKING
  AIR_CONDITIONING
  COFFEE
  PARK
  POOL
  GYM
  KITCHEN
  TV
  LAUNDRY
  PET_FRIENDLY
}

model Location {
  id        String @id @default(cuid())
  city      String
  state     String
  country   String
  latitude  Float?
  longitude Float?

  properties Property[]
}

model Payment {
  id          String   @id @default(cuid())
  amount      Float
  paymentDate DateTime

  bookingId String  @unique
  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
}

model CheckInCheckOut {
  id           String   @id @default(cuid())
  checkInDate  DateTime
  checkOutDate DateTime

  bookingId String  @unique
  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
}
